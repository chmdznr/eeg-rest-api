// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Pai Joe",
            "email": "pai.joe@wedibojone.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/newborn-data": {
            "post": {
                "description": "Create a new record in the newborn_datas table",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bayi"
                ],
                "summary": "Create a new record in the newborn_datas table",
                "parameters": [
                    {
                        "description": "Data Sensor pada bayi",
                        "name": "newbornData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NewbornData"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/reqresp.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/reqresp.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/reqresp.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/newborn-eeg": {
            "post": {
                "description": "Create a new record in the newborn_eegs table",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bayi"
                ],
                "summary": "Create a new record in the newborn_eegs table",
                "parameters": [
                    {
                        "description": "Data EEG pada bayi",
                        "name": "newbornEEG",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.NewbornEEG"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/reqresp.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/reqresp.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/reqresp.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "Get ping message to check if server is alive",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ping"
                ],
                "summary": "Get ping message",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reqresp.SuccessResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.NewbornData": {
            "type": "object",
            "properties": {
                "accel_x": {
                    "type": "number"
                },
                "accel_y": {
                    "type": "number"
                },
                "accel_z": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "gravidity": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "mother_age": {
                    "type": "integer"
                },
                "mother_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parity": {
                    "type": "integer"
                },
                "spo_2": {
                    "type": "integer"
                },
                "thermal": {
                    "type": "number"
                },
                "trial_code": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.NewbornEEG": {
            "type": "object",
            "properties": {
                "channel": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "trial_code": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "reqresp.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "reqresp.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "2024.06.04.3",
	Host:             "eeg-admin.msvc.app",
	BasePath:         "/rest/api",
	Schemes:          []string{},
	Title:            "API untuk data EEG",
	Description:      "API untuk Data EEg",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
